name: Sync Moodle Tags

on:
  schedule:
    - cron: '0 0 * * *' # Daily at midnight
  workflow_dispatch: # Allows manually triggering

jobs:
  sync-tags:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Moodle tags
        id: get-moodle-tags
        run: |
          MOODLE_TAGS=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/moodle/moodle/tags" | jq -r '.[].name')
          echo "moodle_tags<<EOF" >> $GITHUB_ENV
          echo "$MOODLE_TAGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Get existing tags
        id: get-existing-tags
        run: |
          git fetch --tags
          EXISTING_TAGS=$(git tag -l)
          echo "existing_tags<<EOF" >> $GITHUB_ENV
          echo "$EXISTING_TAGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Process missing tags
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          # Split moodle_tags and existing_tags environment variables into arrays
          IFS=$'\n' read -r -a moodle_tags <<< "${{ env.moodle_tags }}"
          IFS=$'\n' read -r -a existing_tags <<< "${{ env.existing_tags }}"

          # Loop through each tag from the Moodle tags list
          for tag in "${moodle_tags[@]}"; do
            # Process only tags that start with 'v'
            if [[ "$tag" != v* ]]; then
              continue
            fi

            tag_exists=false
            # Check if the tag already exists in the repository
            for existing_tag in "${existing_tags[@]}"; do
              if [[ "$existing_tag" == "$tag" ]]; then
                tag_exists=true
                break
              fi
            done

            # If the tag does not exist, create it and trigger the build workflow
            if [[ "$tag_exists" == "false" ]]; then
              echo "Creating tag: $tag"
              git tag "$tag"
              git push origin "$tag"

              # Trigger build workflow with correct tag reference
              curl -X POST \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token $GH_PAT" \
                https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/dispatches \
                -d '{
                  "ref": "refs/tags/'"$tag"'",
                  "inputs": {
                    "moodle_version": "'"$tag"'"
                  }
                }'
            fi
          done

